name: build

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]
  workflow_dispatch:

jobs:
  pre-flight:
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      # Install poetry
      # - name: Install Poetry
      #   run: |
      #     python -m pip install --upgrade pip
      #     python -m pip install poetry

      # Install poetry
      - name: Install poetry
        run: pipx install poetry

      # Setup Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          cache: 'poetry'
          python-version: ${{ matrix.python-version }}

      # Cache pre-commit
      - uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.cache/pre-commit-${{ matrix.python-version }}
          key: pre-commit|${{ matrix.python-version }}|${{ hashFiles('.pre-commit-config.yaml') }}

      # Get pip directory
      # - name: Get pip cache dir
      #   id: pip-cache
      #   run: |
      #     echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      # Cache pip directory
      # - name: pip cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ steps.pip-cache.outputs.dir }}
      #     key: ${{ runner.os }}-pip-${{ matrix.python-version }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-${{ matrix.python-version }}

      # Install dependencies
      - name: Install dependencies
        run: |
          poetry install --with dev,test

      # Lint project using pre-commit config
      - name: Lint with pre-commit
        run: |
          poetry run pre-commit --version
          poetry run pre-commit install
          poetry run pre-commit run --all-files
        env:
          PRE_COMMIT_HOME: ${{ github.workspace }}/.cache/pre-commit-${{ matrix.python-version }}

  test:
    needs: pre-flight
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10', '3.11']

    steps:
      - uses: actions/checkout@v3

      # Install poetry
      # - name: Install Poetry
      #   run: |
      #     python -m pip install --upgrade pip
      #     python -m pip install poetry

      # Install poetry
      - name: Install poetry
        run: pipx install poetry

      # Setup Python
      - name: Set up Python ${{ matrix.os }} ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          cache: 'poetry'
          python-version: ${{ matrix.python-version }}

      # Get pip directory
      # - name: Get pip cache dir
      #   id: pip-cache
      #   run: |
      #     echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      # Cache pip directory
      # - name: pip cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ steps.pip-cache.outputs.dir }}
      #     key: ${{ runner.os }}-pip-${{ matrix.python-version }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-${{ matrix.python-version }}

      # Install dependencies
      - name: Install dependencies
        run: |
          poetry install --with dev,test

      # Test package and save artifacts
      - name: Test with pytest
        run: >
          poetry run pytest
          --cov=gh_action_testing
          --cov-report=html:artifacts/cov-report-${{ matrix.os }}-${{ matrix.python-version }}
          --cov-report=xml
          --html=artifacts/test-report-${{ matrix.os }}-${{ matrix.python-version }}.html
          --junitxml=junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
          --self-contained-html
          tests/

      # # Upload file to codecov
      # - name: Upload coverage.xml to codecov
      #   uses: ./codecov-action@v1
      #   with:
      #     file: ${{ github.workspace }}/coverage.xml
      #     fail_ci_if_error: true

      # Artifact upload
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            artifacts/cov-report-${{ matrix.os }}-${{ matrix.python-version }}
            artifacts/test-report-${{ matrix.os }}-${{ matrix.python-version }}.html
            junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
        if: ${{ always() }}
